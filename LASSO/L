{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 821,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_excel('0_SERIES_RCWallDB_v.July2013.xlsx',\n",
    "                  sheet_name='SERIES_DB-MetaData',\n",
    "                   \n",
    "                  index = False)\n",
    "# df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 822,
   "metadata": {},
   "outputs": [],
   "source": [
    "headers = df.iloc[3]\n",
    "df1  = pd.DataFrame(df.values[4:], columns=headers)\n",
    "df1.reset_index(drop=True, inplace=True)\n",
    "# df.rename(columns={ df.columns[1]: \"your value\" }, inplace = True)\n",
    "df1.drop(['#', '# Exp. campaign','# Test'], axis=1, inplace=True)\n",
    "# new_df = new_df.drop(\"3\", axis = 1)\n",
    "df1 = df1.fillna(0)\n",
    "\n",
    "df1['Units (SI/US)'] = pd.factorize(df1['Units (SI/US)'])[0] + 1\n",
    "df1['Loading (C/M)'] = pd.factorize(df1['Loading (C/M)'])[0] + 1\n",
    "df1['Cross Section'] = pd.factorize(df1['Cross Section'])[0] + 1\n",
    "df1['P-D'] = pd.factorize(df1['P-D'])[0] + 1\n",
    "df1['Test Configu-ration'] = pd.factorize(df1['Test Configu-ration'])[0] + 1\n",
    "df1['Embedment Type'] = pd.factorize(df1['Embedment Type'])[0] + 1\n",
    "df1['Type of Confin.'] = pd.factorize(df1['Type of Confin.'])[0] + 1\n",
    "\n",
    "df1.drop(['Test ID notation', 'Reference', 'Ribbed/Smooth Bars', 'Steel Grade','Steel   Grade'], axis=1, inplace=True)\n",
    "\n",
    "# df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 823,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df1.dtypes\n",
    "# X[0:40]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 824,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "df2 = df1\n",
    "# df2['Failure'] = df1['Failure'].replace(3,2)\n",
    "fial = np.array([1, 2])\n",
    "df3 = df2.loc[df2['Failure'].isin(fial)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 825,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4 = df3.select_dtypes(include=['float64'])\n",
    "df5 = df3.select_dtypes(include=['int64'])\n",
    "df6 = df4.astype(np.int64)\n",
    "\n",
    "df6 = pd.concat([df5, df6], axis=1)\n",
    "\n",
    "df_norm = (df6 - df6.min()) / (df6.max() - df6.min())\n",
    "df_norm = df_norm.fillna(0)\n",
    "df6.to_csv('matlab.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 886,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "y = df6.loc[:, df6.columns == 'Failure'].to_numpy()\n",
    "X = df6.loc[:, df6.columns != 'Failure'].to_numpy()\n",
    "# X = df_norm.loc[:, df_norm.columns != 'Failure'].to_numpy()\n",
    "y = y-1\n",
    "# ax = y.plot.hist(bins=2, alpha=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 887,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Example of adaptive Lasso to produce event sparser solutions\\nAdaptive lasso consists in computing many Lasso with feature\\nreweighting. It's also known as iterated L1.\\n\""
      ]
     },
     "execution_count": 887,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Example of adaptive Lasso to produce event sparser solutions\n",
    "Adaptive lasso consists in computing many Lasso with feature\n",
    "reweighting. It's also known as iterated L1.\n",
    "\"\"\"\n",
    "# Authors: Alexandre Gramfort <firstname.lastname@inria.fr>\n",
    "# License: BSD (3-clause)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1251,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "160.04233070745164\n",
      "158.87663123830563\n",
      "158.93633647991143\n",
      "159.10185781369827\n",
      "159.0548936184565\n",
      "159.03386472859322\n",
      "159.0255250120638\n",
      "159.02224424065818\n",
      "159.02095208840396\n",
      "159.02044236589242\n",
      "0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-1251-a02f34fed2f2>:44: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.\n",
      "  print (np.mean((clf.coef_ != 0.0) == (coef != 0.0)))\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.datasets import make_regression\n",
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "# X, y, coef = make_regression(n_samples=4, n_features=3, n_informative=1,\n",
    "#                     noise=0.001, shuffle=True, coef=True, random_state=49)\n",
    "\n",
    "alpha = 0.2\n",
    "\n",
    "g = lambda w: np.sqrt(np.abs(w))\n",
    "gprime = lambda w: 1. / (2. * np.sqrt(np.abs(w)) + np.finfo(float).eps)\n",
    "\n",
    "# Or another option:\n",
    "# ll = 0.01\n",
    "# g = lambda w: np.log(ll + np.abs(w))\n",
    "# gprime = lambda w: 1. / (ll + np.abs(w))\n",
    "\n",
    "#####\n",
    "logit = lambda w: 1/(1+np.exp(-w))\n",
    "classify = lambda w: np.sign(w)/2 + 0.5\n",
    "#####\n",
    "\n",
    "n_samples, n_features = X.shape\n",
    "# p_obj = lambda w: 1. / (2 * n_samples) * np.sum((y - classify(np.dot(X, w))) ** 2) \\\n",
    "#                   + alpha * np.sum(g(w))\n",
    "y_hat = lambda w: logit(np.dot(X, w))\n",
    "\n",
    "p_obj = lambda w: -1. / ( n_samples) * np.sum(\n",
    "                                                (     y * np.log(  y_hat(w))\n",
    "                                                 + (1-y)* np.log(1-y_hat(w)) ) ) \\\n",
    "                  + alpha * np.sum(g(w))\n",
    "\n",
    "weights = np.ones(n_features)\n",
    "n_lasso_iterations = 10\n",
    "\n",
    "for k in range(n_lasso_iterations):\n",
    "    X_w = X / weights[np.newaxis, :]\n",
    "    clf = Lasso(alpha=alpha, fit_intercept=True)\n",
    "    clf.fit(X_w, y)\n",
    "    coef_ = clf.coef_ / weights\n",
    "    weights = gprime(coef_)\n",
    "    print (p_obj(coef_))  # should go down\n",
    "\n",
    "print (np.mean((clf.coef_ != 0.0) == (coef != 0.0)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1252,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  1,   1,   1, ..., 490,   0,   0],\n",
       "       [  1,   1,   1, ..., 490,   0,   0],\n",
       "       [  1,   1,   2, ..., 362,   0,   0],\n",
       "       ...,\n",
       "       [  1,   1,   1, ..., 342, 445,   0],\n",
       "       [  1,   1,   1, ..., 342, 445,   0],\n",
       "       [  1,   1,   2, ..., 342, 445,   0]], dtype=int64)"
      ]
     },
     "execution_count": 1252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1253,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [1],\n",
       "       [1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0]], dtype=int64)"
      ]
     },
     "execution_count": 1253,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1254,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00, -0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00, -0.00000000e+00, -0.00000000e+00,\n",
       "       -0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -0.00000000e+00,\n",
       "       -0.00000000e+00, -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,\n",
       "       -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -1.29609575e-04,\n",
       "        0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,\n",
       "       -1.47676360e-04,  0.00000000e+00,  6.81145563e-07,  0.00000000e+00,\n",
       "       -0.00000000e+00,  0.00000000e+00, -0.00000000e+00, -0.00000000e+00,\n",
       "       -0.00000000e+00,  0.00000000e+00,  6.81809481e-04, -0.00000000e+00,\n",
       "       -0.00000000e+00,  3.79290325e-04, -0.00000000e+00, -0.00000000e+00,\n",
       "       -0.00000000e+00, -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00, -0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -3.53181940e-04,\n",
       "       -0.00000000e+00, -1.32105138e-03,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00])"
      ]
     },
     "execution_count": 1254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1255,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fc [MPa/ksi]\n",
      "bw [mm/inches]\n",
      "Ls [mm/inches]\n",
      "Reinf. Ratio, % (Calc.)\n",
      "fyl Interm. Parallel to Load [MPa/ksi]\n",
      "fyv longitudinal [MPa/ksi]\n",
      "Bar diameter [mm/inches]\n"
     ]
    }
   ],
   "source": [
    "for i in range(coef_.shape[0]):\n",
    "    if coef_[i] != 0:\n",
    "        print(df6.columns[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1256,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = classify(np.dot(X, coef_))\n",
    "# np.dot(X, coef_)\n",
    "# classify(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 1.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 1.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [0., 0.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [1., 1.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 0.]])"
      ]
     },
     "execution_count": 1257,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_pred = np.asarray(y_pred)\n",
    "Y_pred = Y_pred.reshape([225, 1]) \n",
    "Y = np.asarray(y)\n",
    "Y = Y.reshape([225, 1]) \n",
    "output = np.concatenate((Y, Y_pred), axis=1)\n",
    "output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27f438a9cd0>"
      ]
     },
     "execution_count": 1258,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "cm = confusion_matrix(y, y_pred)\n",
    "# sns.heatmap(cm/np.sum(cm), annot=True, \n",
    "#             fmt='.2%', cmap='Blues')\n",
    "sns.heatmap(cm, annot=True, cmap='Blues')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8355555555555556"
      ]
     },
     "execution_count": 1259,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(y, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
